using System;
using System.Collections.Generic;
using System.Linq;
using kwh.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;

namespace kwh.Pages.Inventory
{
    public class IndexModel : PageModel
    {
        private readonly kwhDataContext _context;
        public IndexModel(kwhDataContext context)
        {
            _context = context;
        }

        // Add properties to contain searching and filtering parameters
        [BindProperty]
        public string SearchBy { get; set; }
        public string[] Criteria = new[] { "Category", "Part", "Project" };
        public string CurrentFilter { get; set; }

        // Add properties to contain sorting parameters
        public string NameSort { get; set; }
        public string QuantitySort { get; set; }
        public string CostSort { get; set; }
        public string ProjectSort { get; set; }
        public string CategorySort { get; set; }
        public string CurrentSort { get; set; }

        public IList<Component> Component { get; set; }

        // Url: sortOrder, currentFilter, searchBy, searchString and pageIndex
        // The URL and query string is generated by the Anchor Tag Helper.
        public void OnGet(string sortOrder, string currentFilter
            , string searchby, string searchString)
        {
            CurrentSort = sortOrder;

            // Toggle column sort
            NameSort = String.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
            QuantitySort = sortOrder == "Quantity" ? "quan_desc" : "Quantity";
            CostSort = sortOrder == "Cost" ? "cost_desc" : "Cost";
            ProjectSort = sortOrder == "Project" ? "proj_desc" : "Project";
            CategorySort = sortOrder == "Category" ? "cat_desc" : "Category";

            if (searchString == null)
            {
                searchString = currentFilter;
            }

            CurrentFilter = searchString;
            SearchBy = searchby;

            // IQueryable allows flexibility for modifications...
            // An IQueryable query isn't executed until the IQueryable object is converted into a collection.
            IQueryable<Component> components = _context.Component;

            // Filter by searchBy criteria, converted to uppercase for case-sensitivity.
            if (!String.IsNullOrEmpty(searchString))
            {
                if (searchby == "Category")
                {
                    components = components
                        .Where(c => c.Category.CategoryName.ToUpper().Contains(searchString.ToUpper()));

                } else if (searchby == "Part")
                {
                    components = components
                        .Where(c => c.PartName.ToUpper().Contains(searchString.ToUpper())
                        || c.PartNumber.ToUpper().Contains(searchString.ToUpper()));
                } else
                {
                    components = components
                        .Where(c => c.Project.ProjectName.ToUpper().Contains(searchString.ToUpper()));
                }
            }

            // Appends sort order to IQueryable
            switch (sortOrder)
            {
                case "name_desc":
                    components = components
                        .OrderByDescending(c => c.PartName);
                    break;
                case "Quantity":
                    components = components
                        .OrderBy(c => c.QuantityCurrent);
                    break;
                case "quan_desc":
                    components = components
                        .OrderByDescending(c => c.QuantityCurrent);
                    break;
                case "Cost":
                    components = components
                        .OrderBy(c => c.UnitCost);
                    break;
                case "cost_desc":
                    components = components
                        .OrderByDescending(c => c.UnitCost);
                    break;
                case "Project":
                    components = components
                        .OrderBy(c => c.Project.ProjectName);
                    break;
                case "proj_desc":
                    components = components
                        .OrderByDescending(c => c.Project.ProjectName);
                    break;
                case "Category":
                    components = components
                        .OrderBy(c => c.Category.CategoryName);
                    break;
                case "cat_desc":
                    components = components
                        .OrderByDescending(c => c.Category.CategoryName);
                    break;
                default:
                    components = components
                        .OrderBy(c => c.PartName);
                    break;
            }

            // IQueryable is converted to a collection by calling .ToList
            Component = components
                .Include(c => c.Maturity)
                .Include(c => c.Project)
                .Include(c => c.Vendor)
                .Include(c => c.AppUser)
                .Include(c => c.Category)
                .AsEnumerable()
                .GroupBy(c => c.ComponentId)
                .Select(o => o.OrderByDescending(t => t.Timestamp).First())
                .ToList();
        }

    }
}


